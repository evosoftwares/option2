import 'package:flutter/material.dart';
import 'dart:async';
import 'dart:math';

// O ponto de entrada principal da aplicação Flutter.
void main() {
  runApp(const UberCloneApp());
}

// O widget raiz da aplicação.
class UberCloneApp extends StatelessWidget {
  const UberCloneApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Uber Clone',
      theme: ThemeData(
        fontFamily: 'Inter',
        scaffoldBackgroundColor: Colors.white,
        splashColor: Colors.transparent,
        highlightColor: Colors.transparent,
        // Adiciona tema de transições de página
        pageTransitionsTheme: const PageTransitionsTheme(
          builders: {
            TargetPlatform.android: CupertinoPageTransitionsBuilder(),
            TargetPlatform.iOS: CupertinoPageTransitionsBuilder(),
          },
        ),
      ),
      debugShowCheckedModeBanner: false,
      home: const SplashScreen(), // Nova tela de splash
    );
  }
}

// --- NOVA TELA DE SPLASH COM ANIMAÇÃO ---
class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> with TickerProviderStateMixin {
  late AnimationController _logoController;
  late AnimationController _textController;
  late Animation<double> _logoAnimation;
  late Animation<double> _textAnimation;

  @override
  void initState() {
    super.initState();
    
    _logoController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );
    
    _textController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _logoAnimation = CurvedAnimation(
      parent: _logoController,
      curve: Curves.elasticOut,
    );
    
    _textAnimation = CurvedAnimation(
      parent: _textController,
      curve: Curves.easeInOut,
    );
    
    _logoController.forward();
    Future.delayed(const Duration(milliseconds: 800), () {
      if (mounted) _textController.forward();
    });
    
    Future.delayed(const Duration(seconds: 3), () {
      if (mounted) {
        Navigator.of(context).pushReplacement(
          PageRouteBuilder(
            pageBuilder: (context, animation, secondaryAnimation) => const LoginScreen(),
            transitionsBuilder: (context, animation, secondaryAnimation, child) {
              return FadeTransition(
                opacity: animation,
                child: child,
              );
            },
            transitionDuration: const Duration(milliseconds: 800),
          ),
        );
      }
    });
  }

  @override
  void dispose() {
    _logoController.dispose();
    _textController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ScaleTransition(
              scale: _logoAnimation,
              child: Container(
                width: 120,
                height: 120,
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(25),
                ),
                child: const Icon(
                  Icons.local_taxi,
                  size: 70,
                  color: Colors.black,
                ),
              ),
            ),
            const SizedBox(height: 30),
            FadeTransition(
              opacity: _textAnimation,
              child: const Text(
                'UBER',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 45,
                  fontWeight: FontWeight.bold,
                  letterSpacing: 8,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// --- TELA DE AUTENTICAÇÃO COM ANIMAÇÕES ---
class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> with TickerProviderStateMixin {
  bool _showLoginPage = true;
  late AnimationController _fadeController;
  late AnimationController _slideController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;

  @override
  void initState() {
    super.initState();
    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );
    
    _fadeAnimation = CurvedAnimation(
      parent: _fadeController,
      curve: Curves.easeIn,
    );
    
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 0.3),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeOutCubic,
    ));
    
    _fadeController.forward();
    _slideController.forward();
  }

  @override
  void dispose() {
    _fadeController.dispose();
    _slideController.dispose();
    super.dispose();
  }

  void _togglePage() {
    setState(() {
      _showLoginPage = !_showLoginPage;
    });
  }

  void _navigateToRoleSelection() {
    Navigator.of(context).push(
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) => const RoleSelectionScreen(),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          return SlideTransition(
            position: animation.drive(
              Tween(begin: const Offset(1.0, 0.0), end: Offset.zero).chain(
                CurveTween(curve: Curves.easeOutCubic),
              ),
            ),
            child: child,
          );
        },
      ),
    );
  }

  void _navigateToHome() {
    Navigator.of(context).pushReplacement(
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) => const PassengerHomeScreen(),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          return FadeTransition(
            opacity: animation,
            child: ScaleTransition(
              scale: animation.drive(
                Tween(begin: 0.95, end: 1.0).chain(
                  CurveTween(curve: Curves.easeOut),
                ),
              ),
              child: child,
            ),
          );
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: FadeTransition(
          opacity: _fadeAnimation,
          child: SlideTransition(
            position: _slideAnimation,
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 24.0),
              child: AnimatedSwitcher(
                duration: const Duration(milliseconds: 500),
                transitionBuilder: (Widget child, Animation<double> animation) {
                  return SlideTransition(
                    position: animation.drive(
                      Tween(
                        begin: const Offset(0.0, 0.5),
                        end: Offset.zero,
                      ).chain(CurveTween(curve: Curves.easeOut)),
                    ),
                    child: FadeTransition(opacity: animation, child: child),
                  );
                },
                child: _showLoginPage ? _buildLoginForm() : _buildRegisterForm(),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildLoginForm() {
    return Column(
      key: const ValueKey('login'),
      crossAxisAlignment: CrossAxisAlignment.start,
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        TweenAnimationBuilder<double>(
          tween: Tween(begin: 0, end: 1),
          duration: const Duration(milliseconds: 800),
          builder: (context, value, child) {
            return Opacity(
              opacity: value,
              child: Transform.translate(
                offset: Offset(0, 20 * (1 - value)),
                child: const Text(
                  'Continue com o seu email',
                  style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold, color: Colors.black),
                ),
              ),
            );
          },
        ),
        const SizedBox(height: 48),
        AnimatedTextField(label: 'Email', delay: 200),
        const SizedBox(height: 24),
        AnimatedTextField(label: 'Senha', obscureText: true, delay: 400),
        const SizedBox(height: 32),
        AnimatedButton(text: 'Entrar', onPressed: _navigateToHome, delay: 600),
        const SizedBox(height: 24),
        _buildToggleText(text: 'Não tem uma conta? ', linkText: 'Registe-se', onTap: _togglePage),
      ],
    );
  }

  Widget _buildRegisterForm() {
    return Column(
      key: const ValueKey('register'),
      crossAxisAlignment: CrossAxisAlignment.start,
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        const Text('Crie a sua conta', style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold, color: Colors.black)),
        const SizedBox(height: 48),
        AnimatedTextField(label: 'Nome Completo', delay: 200),
        const SizedBox(height: 24),
        AnimatedTextField(label: 'Email', delay: 400),
        const SizedBox(height: 24),
        AnimatedTextField(label: 'Senha', obscureText: true, delay: 600),
        const SizedBox(height: 32),
        AnimatedButton(text: 'Criar Conta', onPressed: _navigateToRoleSelection, delay: 800),
        const SizedBox(height: 24),
        _buildToggleText(text: 'Já tem uma conta? ', linkText: 'Faça login', onTap: _togglePage),
      ],
    );
  }

  Widget _buildToggleText({required String text, required String linkText, required VoidCallback onTap}) {
    return Center(
      child: GestureDetector(
        onTap: onTap,
        child: RichText(
          text: TextSpan(
            style: TextStyle(color: Colors.grey[700], fontSize: 16, fontFamily: 'Inter'),
            children: [
              TextSpan(text: text),
              TextSpan(text: linkText, style: const TextStyle(color: Colors.black, fontWeight: FontWeight.bold, decoration: TextDecoration.underline)),
            ],
          ),
        ),
      ),
    );
  }
}

// Widget de TextField animado
class AnimatedTextField extends StatefulWidget {
  final String label;
  final bool obscureText;
  final int delay;

  const AnimatedTextField({
    super.key,
    required this.label,
    this.obscureText = false,
    this.delay = 0,
  });

  @override
  State<AnimatedTextField> createState() => _AnimatedTextFieldState();
}

class _AnimatedTextFieldState extends State<AnimatedTextField> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    _animation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeOut,
    );
    
    Future.delayed(Duration(milliseconds: widget.delay), () {
      if (mounted) _controller.forward();
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SlideTransition(
      position: _animation.drive(
        Tween(begin: const Offset(-0.5, 0), end: Offset.zero),
      ),
      child: FadeTransition(
        opacity: _animation,
        child: TextField(
          obscureText: widget.obscureText,
          style: const TextStyle(color: Colors.black, fontSize: 16),
          decoration: InputDecoration(
            labelText: widget.label,
            labelStyle: TextStyle(color: Colors.grey[600]),
            filled: true,
            fillColor: Colors.grey[200],
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide.none,
            ),
          ),
        ),
      ),
    );
  }
}

// Widget de Botão animado
class AnimatedButton extends StatefulWidget {
  final String text;
  final VoidCallback onPressed;
  final int delay;

  const AnimatedButton({
    super.key,
    required this.text,
    required this.onPressed,
    this.delay = 0,
  });

  @override
  State<AnimatedButton> createState() => _AnimatedButtonState();
}

class _AnimatedButtonState extends State<AnimatedButton> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;
  bool _isPressed = false;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    _scaleAnimation = CurvedAnimation(
      parent: _controller,
      curve: Curves.elasticOut,
    );
    
    Future.delayed(Duration(milliseconds: widget.delay), () {
      if (mounted) _controller.forward();
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return ScaleTransition(
      scale: _scaleAnimation,
      child: AnimatedScale(
        scale: _isPressed ? 0.95 : 1.0,
        duration: const Duration(milliseconds: 100),
        child: GestureDetector(
          onTapDown: (_) => setState(() => _isPressed = true),
          onTapUp: (_) {
            setState(() => _isPressed = false);
            widget.onPressed();
          },
          onTapCancel: () => setState(() => _isPressed = false),
          child: SizedBox(
            width: double.infinity,
            child: ElevatedButton(
              onPressed: widget.onPressed,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.black,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
              ),
              child: Text(widget.text, style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            ),
          ),
        ),
      ),
    );
  }
}

// --- TELA DE SELEÇÃO DE PERFIL COM ANIMAÇÕES ---
class RoleSelectionScreen extends StatefulWidget {
  const RoleSelectionScreen({super.key});

  @override
  State<RoleSelectionScreen> createState() => _RoleSelectionScreenState();
}

class _RoleSelectionScreenState extends State<RoleSelectionScreen> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation1;
  late Animation<Offset> _slideAnimation2;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _fadeAnimation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeIn,
    );
    
    _slideAnimation1 = Tween<Offset>(
      begin: const Offset(-1, 0),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: const Interval(0.0, 0.6, curve: Curves.easeOutCubic),
    ));
    
    _slideAnimation2 = Tween<Offset>(
      begin: const Offset(1, 0),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: const Interval(0.2, 0.8, curve: Curves.easeOutCubic),
    ));
    
    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  void _selectPassenger(BuildContext context) {
    Navigator.of(context).pushAndRemoveUntil(
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) => const PassengerHomeScreen(),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          return FadeTransition(
            opacity: animation,
            child: ScaleTransition(
              scale: animation.drive(
                Tween(begin: 0.9, end: 1.0).chain(
                  CurveTween(curve: Curves.easeOut),
                ),
              ),
              child: child,
            ),
          );
        },
      ),
      (route) => false,
    );
  }

  void _selectDriver(BuildContext context) {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => const DocumentUploadScreen(
          title: 'Carteira de Habilitação (CNH)',
          subtitle: 'Tire uma foto clara e legível da sua CNH aberta, mostrando a sua foto e informações.',
          nextRoute: DocumentUploadScreen(
            title: 'Documento do Veículo (CRLV)',
            subtitle: 'Tire uma foto do documento de registo atual do seu veículo.',
            nextRoute: DocumentUploadScreen(
              title: 'Foto do Veículo',
              subtitle: 'Tire uma foto da parte da frente do seu veículo, mostrando a matrícula claramente.',
              isFinalStep: true,
            ),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            FadeTransition(
              opacity: _fadeAnimation,
              child: const Text(
                'Como quer usar a app?',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold, color: Colors.black),
              ),
            ),
            const SizedBox(height: 48),
            SlideTransition(
              position: _slideAnimation1,
              child: _buildRoleCard(
                context: context,
                icon: Icons.person_pin_circle,
                title: 'Passageiro',
                subtitle: 'Peça viagens e chegue ao seu destino.',
                onTap: () => _selectPassenger(context),
                isPassenger: true,
              ),
            ),
            const SizedBox(height: 24),
            SlideTransition(
              position: _slideAnimation2,
              child: _buildRoleCard(
                context: context,
                icon: Icons.drive_eta,
                title: 'Motorista',
                subtitle: 'Ganhe dinheiro a conduzir na sua cidade.',
                onTap: () => _selectDriver(context),
                isPassenger: false,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildRoleCard({
    required BuildContext context,
    required IconData icon,
    required String title,
    required String subtitle,
    required VoidCallback onTap,
    required bool isPassenger,
  }) {
    return HoverAnimatedCard(
      onTap: onTap,
      child: Column(
        children: [
          TweenAnimationBuilder<double>(
            tween: Tween(begin: 0, end: 1),
            duration: const Duration(milliseconds: 1200),
            curve: Curves.elasticOut,
            builder: (context, value, child) {
              return Transform.scale(
                scale: value,
                child: child,
              );
            },
            child: Icon(icon, size: 60, color: Colors.black),
          ),
          const SizedBox(height: 16),
          Text(title, style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold, color: Colors.black)),
          const SizedBox(height: 8),
          Text(subtitle, textAlign: TextAlign.center, style: TextStyle(fontSize: 16, color: Colors.grey[700])),
        ],
      ),
    );
  }
}

// Widget de Card com animação de hover
class HoverAnimatedCard extends StatefulWidget {
  final Widget child;
  final VoidCallback onTap;

  const HoverAnimatedCard({
    super.key,
    required this.child,
    required this.onTap,
  });

  @override
  State<HoverAnimatedCard> createState() => _HoverAnimatedCardState();
}

class _HoverAnimatedCardState extends State<HoverAnimatedCard> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;
  late Animation<double> _elevationAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );
    _scaleAnimation = Tween<double>(
      begin: 1.0,
      end: 0.98,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    ));
    _elevationAnimation = Tween<double>(
      begin: 0,
      end: 8,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    ));
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTapDown: (_) => _controller.forward(),
      onTapUp: (_) {
        _controller.reverse();
        widget.onTap();
      },
      onTapCancel: () => _controller.reverse(),
      child: AnimatedBuilder(
        animation: _controller,
        builder: (context, child) {
          return Transform.scale(
            scale: _scaleAnimation.value,
            child: Container(
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: Colors.grey[100],
                borderRadius: BorderRadius.circular(16),
                border: Border.all(color: Colors.grey[300]!, width: 1.5),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: _elevationAnimation.value,
                    offset: Offset(0, _elevationAnimation.value / 2),
                  ),
                ],
              ),
              child: widget.child,
            ),
          );
        },
      ),
    );
  }
}

// --- TELAS DE REGISTO DE MOTORISTA COM ANIMAÇÕES ---
class DocumentUploadScreen extends StatefulWidget {
  final String title;
  final String subtitle;
  final Widget? nextRoute;
  final bool isFinalStep;

  const DocumentUploadScreen({
    super.key,
    required this.title,
    required this.subtitle,
    this.nextRoute,
    this.isFinalStep = false,
  });

  @override
  State<DocumentUploadScreen> createState() => _DocumentUploadScreenState();
}

class _DocumentUploadScreenState extends State<DocumentUploadScreen> with TickerProviderStateMixin {
  bool _isPhotoTaken = false;
  late AnimationController _cameraController;
  late AnimationController _checkController;
  late Animation<double> _cameraAnimation;
  late Animation<double> _checkAnimation;

  @override
  void initState() {
    super.initState();
    _cameraController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    _checkController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _cameraAnimation = CurvedAnimation(
      parent: _cameraController,
      curve: Curves.elasticOut,
    );
    
    _checkAnimation = CurvedAnimation(
      parent: _checkController,
      curve: Curves.bounceOut,
    );
    
    _cameraController.repeat(reverse: true);
  }

  @override
  void dispose() {
    _cameraController.dispose();
    _checkController.dispose();
    super.dispose();
  }

  void _takePhoto() {
    setState(() {
      _isPhotoTaken = true;
    });
    _cameraController.stop();
    _checkController.forward();
  }

  void _navigateNext() {
    if (widget.isFinalStep) {
      Navigator.of(context).pushAndRemoveUntil(
        PageRouteBuilder(
          pageBuilder: (context, animation, secondaryAnimation) => const DriverHomeScreen(),
          transitionsBuilder: (context, animation, secondaryAnimation, child) {
            return FadeTransition(
              opacity: animation,
              child: child,
            );
          },
        ),
        (route) => false,
      );
    } else if (widget.nextRoute != null) {
      Navigator.of(context).push(
        MaterialPageRoute(builder: (context) => widget.nextRoute!),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(widget.title, style: const TextStyle(fontSize: 28, fontWeight: FontWeight.bold, color: Colors.black)),
            const SizedBox(height: 16),
            Text(widget.subtitle, style: TextStyle(fontSize: 16, color: Colors.grey[700])),
            const Spacer(),
            GestureDetector(
              onTap: _takePhoto,
              child: AnimatedContainer(
                duration: const Duration(milliseconds: 300),
                height: 200,
                decoration: BoxDecoration(
                  color: _isPhotoTaken ? Colors.green[50] : Colors.grey[200],
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(
                    color: _isPhotoTaken ? Colors.green : Colors.grey[300]!,
                    width: 2,
                  ),
                ),
                child: _isPhotoTaken
                    ? ScaleTransition(
                        scale: _checkAnimation,
                        child: const Icon(
                          Icons.check_circle,
                          size: 80,
                          color: Colors.green,
                        ),
                      )
                    : Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          AnimatedBuilder(
                            animation: _cameraAnimation,
                            builder: (context, child) {
                              return Transform.scale(
                                scale: 1.0 + (_cameraAnimation.value * 0.1),
                                child: Icon(
                                  Icons.camera_alt,
                                  size: 50,
                                  color: Colors.grey[600],
                                ),
                              );
                            },
                          ),
                          const SizedBox(height: 16),
                          Text('Tirar foto', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.grey[800])),
                        ],
                      ),
              ),
            ),
            const Spacer(),
            AnimatedOpacity(
              opacity: _isPhotoTaken ? 1.0 : 0.3,
              duration: const Duration(milliseconds: 300),
              child: ElevatedButton(
                onPressed: _isPhotoTaken ? _navigateNext : null,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.black,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                  disabledBackgroundColor: Colors.grey[400],
                ),
                child: Text(widget.isFinalStep ? 'Concluir' : 'Continuar', style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// --- TELA PRINCIPAL DO PASSAGEIRO COM ANIMAÇÕES ---
class PassengerHomeScreen extends StatefulWidget {
  const PassengerHomeScreen({super.key});

  @override
  State<PassengerHomeScreen> createState() => _PassengerHomeScreenState();
}

class _PassengerHomeScreenState extends State<PassengerHomeScreen> with TickerProviderStateMixin {
  late AnimationController _mapController;
  late AnimationController _panelController;
  late Animation<double> _mapAnimation;
  late Animation<Offset> _panelAnimation;

  @override
  void initState() {
    super.initState();
    _mapController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );
    _panelController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _mapAnimation = CurvedAnimation(
      parent: _mapController,
      curve: Curves.easeOut,
    );
    
    _panelAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _panelController,
      curve: Curves.easeOutCubic,
    ));
    
    _mapController.forward();
    Future.delayed(const Duration(milliseconds: 300), () {
      if (mounted) _panelController.forward();
    });
  }

  @override
  void dispose() {
    _mapController.dispose();
    _panelController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      drawer: const MenuScreen(),
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          FadeTransition(
            opacity: _mapAnimation,
            child: const AnimatedMap(),
          ),
          const AnimatedTopBar(),
          SlideTransition(
            position: _panelAnimation,
            child: const _BottomPanel(),
          ),
        ],
      ),
    );
  }
}

// Classe de dados para os carros no mapa
class _CarData {
  final double startX, startY, endX, endY;
  _CarData(this.startX, this.startY, this.endX, this.endY);
}

// Widget de Mapa Animado
class AnimatedMap extends StatefulWidget {
  const AnimatedMap({super.key});

  @override
  State<AnimatedMap> createState() => _AnimatedMapState();
}

class _AnimatedMapState extends State<AnimatedMap> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;
  // CORREÇÃO: Gerar dados dos carros uma vez para evitar recálculo no build
  final List<_CarData> _cars = [];
  final int _carCount = 5;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 4),
      vsync: this,
    );
    _animation = CurvedAnimation(
      parent: _controller,
      curve: Curves.linear,
    );
    _controller.repeat();

    // Gera os dados dos carros uma única vez
    final random = Random();
    for (int i = 0; i < _carCount; i++) {
      _cars.add(_CarData(
        random.nextDouble(),
        random.nextDouble(),
        random.nextDouble(),
        random.nextDouble(),
      ));
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      color: const Color(0xFFE2E8F0),
      child: Stack(
        children: [
          Center(
            child: Text('Mapa', style: TextStyle(fontSize: 32, color: Colors.grey[400])),
          ),
          // Simula pontos de carros se movendo usando os dados pré-gerados
          ..._cars.map((carData) {
            return AnimatedBuilder(
              animation: _animation,
              builder: (context, child) {
                final position = Tween<Offset>(
                  begin: Offset(carData.startX, carData.startY),
                  end: Offset(carData.endX, carData.endY),
                ).transform(_animation.value);

                return Positioned(
                  left: position.dx * MediaQuery.of(context).size.width,
                  top: position.dy * MediaQuery.of(context).size.height,
                  child: Container(
                    width: 10,
                    height: 10,
                    decoration: BoxDecoration(
                      color: Colors.black,
                      shape: BoxShape.circle,
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.3),
                          blurRadius: 4,
                        ),
                      ],
                    ),
                  ),
                );
              },
            );
          }).toList(),
        ],
      ),
    );
  }
}


// TopBar Animada
class AnimatedTopBar extends StatefulWidget {
  const AnimatedTopBar({super.key});

  @override
  State<AnimatedTopBar> createState() => _AnimatedTopBarState();
}

class _AnimatedTopBarState extends State<AnimatedTopBar> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<Offset> _slideAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, -1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeOut,
    ));
    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SlideTransition(
      position: _slideAnimation,
      child: Positioned(
        top: 0,
        left: 0,
        right: 0,
        child: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [Colors.black54, Colors.transparent],
            ),
          ),
          child: Padding(
            padding: const EdgeInsets.fromLTRB(16, 50, 16, 16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                BouncingWidget(
                  onTap: () => Scaffold.of(context).openDrawer(),
                  child: Container(
                    decoration: const BoxDecoration(
                      color: Colors.white,
                      shape: BoxShape.circle,
                      boxShadow: [BoxShadow(blurRadius: 5, color: Colors.black26)],
                    ),
                    child: const Padding(
                      padding: EdgeInsets.all(8.0),
                      child: Icon(Icons.menu, color: Colors.black),
                    ),
                  ),
                ),
                BouncingWidget(
                  onTap: () {},
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: const [BoxShadow(blurRadius: 5, color: Colors.black26)],
                    ),
                    child: const Row(
                      children: [
                        Icon(Icons.person, color: Colors.black, size: 20),
                        SizedBox(width: 8),
                        Text('Para si', style: TextStyle(color: Colors.black, fontWeight: FontWeight.bold)),
                        SizedBox(width: 8),
                        Icon(Icons.keyboard_arrow_down, color: Colors.black, size: 20),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

// Widget com efeito de bounce
class BouncingWidget extends StatefulWidget {
  final Widget child;
  final VoidCallback onTap;

  const BouncingWidget({super.key, required this.child, required this.onTap});

  @override
  State<BouncingWidget> createState() => _BouncingWidgetState();
}

class _BouncingWidgetState extends State<BouncingWidget> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 100),
      vsync: this,
      value: 1.0,
      lowerBound: 0.9,
      upperBound: 1.0,
    );
    _animation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTapDown: (_) => _controller.reverse(),
      onTapUp: (_) {
        _controller.forward();
        widget.onTap();
      },
      onTapCancel: () => _controller.forward(),
      child: ScaleTransition(
        scale: _animation,
        child: widget.child,
      ),
    );
  }
}

class _BottomPanel extends StatelessWidget {
  const _BottomPanel();

  @override
  Widget build(BuildContext context) {
    return Align(
      alignment: Alignment.bottomCenter,
      child: Container(
        width: double.infinity,
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.vertical(top: Radius.circular(24)),
          boxShadow: [BoxShadow(blurRadius: 10, color: Colors.black38)],
        ),
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              AnimatedTextWidget(
                text: 'Bom dia, Utilizador',
                style: const TextStyle(color: Colors.black, fontSize: 26, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 16),
              PulsingWidget(
                child: GestureDetector(
                  onTap: () => Navigator.of(context).push(
                    PageRouteBuilder(
                      pageBuilder: (context, animation, secondaryAnimation) => const SearchScreen(),
                      transitionsBuilder: (context, animation, secondaryAnimation, child) {
                        return SlideTransition(
                          position: animation.drive(
                            Tween(begin: const Offset(0, 1), end: Offset.zero).chain(
                              CurveTween(curve: Curves.easeOut),
                            ),
                          ),
                          child: child,
                        );
                      },
                    ),
                  ),
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                    decoration: BoxDecoration(
                      color: Colors.grey[200],
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: const Row(
                      children: [
                        Icon(Icons.search, color: Colors.black),
                        SizedBox(width: 16),
                        Text('Para onde?', style: TextStyle(color: Colors.black, fontSize: 20, fontWeight: FontWeight.bold)),
                      ],
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 24),
              AnimatedListItem(
                delay: 100,
                child: _buildSavedPlaceTile(
                  icon: Icons.home,
                  title: 'Casa',
                  subtitle: 'Seu endereço de casa',
                ),
              ),
              const Divider(height: 1, color: Color(0xFFEEEEEE)),
              AnimatedListItem(
                delay: 200,
                child: _buildSavedPlaceTile(
                  icon: Icons.work,
                  title: 'Trabalho',
                  subtitle: 'Seu endereço profissional',
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSavedPlaceTile({
    required IconData icon,
    required String title,
    required String subtitle,
  }) {
    return ListTile(
      contentPadding: EdgeInsets.zero,
      leading: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Colors.blue[50],
          shape: BoxShape.circle,
        ),
        child: Icon(icon, color: const Color(0xFF0052FF)),
      ),
      title: Text(title, style: const TextStyle(color: Colors.black, fontWeight: FontWeight.bold)),
      subtitle: Text(subtitle, style: const TextStyle(color: Colors.grey)),
      onTap: () {},
    );
  }
}

// Widget de texto animado
class AnimatedTextWidget extends StatefulWidget {
  final String text;
  final TextStyle style;

  const AnimatedTextWidget({
    super.key,
    required this.text,
    required this.style,
  });

  @override
  State<AnimatedTextWidget> createState() => _AnimatedTextWidgetState();
}

class _AnimatedTextWidgetState extends State<AnimatedTextWidget> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _animation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeOut,
    );
    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _animation,
      builder: (context, child) {
        return Opacity(
          opacity: _animation.value,
          child: Transform.translate(
            offset: Offset(0, 20 * (1 - _animation.value)),
            child: Text(widget.text, style: widget.style),
          ),
        );
      },
    );
  }
}

// Widget com efeito de pulsação
class PulsingWidget extends StatefulWidget {
  final Widget child;

  const PulsingWidget({super.key, required this.child});

  @override
  State<PulsingWidget> createState() => _PulsingWidgetState();
}

class _PulsingWidgetState extends State<PulsingWidget> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    );
    _animation = Tween<double>(
      begin: 1.0,
      end: 1.02,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    ));
    _controller.repeat(reverse: true);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _animation,
      builder: (context, child) {
        return Transform.scale(
          scale: _animation.value,
          child: widget.child,
        );
      },
    );
  }
}

// Widget de item de lista animado
class AnimatedListItem extends StatefulWidget {
  final Widget child;
  final int delay;

  const AnimatedListItem({
    super.key,
    required this.child,
    this.delay = 0,
  });

  @override
  State<AnimatedListItem> createState() => _AnimatedListItemState();
}

class _AnimatedListItemState extends State<AnimatedListItem> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _slideAnimation = Tween<Offset>(
      begin: const Offset(-0.5, 0),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeOut,
    ));
    
    _fadeAnimation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeIn,
    );
    
    Future.delayed(Duration(milliseconds: widget.delay), () {
      if (mounted) _controller.forward();
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SlideTransition(
      position: _slideAnimation,
      child: FadeTransition(
        opacity: _fadeAnimation,
        child: widget.child,
      ),
    );
  }
}

// --- TELA DE PESQUISA COM ANIMAÇÕES ---
class SearchScreen extends StatefulWidget {
  const SearchScreen({super.key});

  @override
  State<SearchScreen> createState() => _SearchScreenState();
}

class _SearchScreenState extends State<SearchScreen> with TickerProviderStateMixin {
  final _originController = TextEditingController(text: 'Localização Atual');
  final _destinationController = TextEditingController();
  final List<TextEditingController> _stopControllers = [];
  
  late AnimationController _routeAnimationController;
  late Animation<double> _routeAnimation;

  @override
  void initState() {
    super.initState();
    _routeAnimationController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _routeAnimation = CurvedAnimation(
      parent: _routeAnimationController,
      curve: Curves.easeOut,
    );
    _routeAnimationController.forward();
  }

  @override
  void dispose() {
    _originController.dispose();
    _destinationController.dispose();
    for (final controller in _stopControllers) {
      controller.dispose();
    }
    _routeAnimationController.dispose();
    super.dispose();
  }

  void _addStop() {
    setState(() {
      _stopControllers.add(TextEditingController());
    });
  }

  void _navigateToRideOptions() {
    if (_destinationController.text.isNotEmpty) {
      Navigator.of(context).push(
        PageRouteBuilder(
          pageBuilder: (context, animation, secondaryAnimation) => const RideOptionsScreen(),
          transitionsBuilder: (context, animation, secondaryAnimation, child) {
            return SlideTransition(
              position: animation.drive(
                Tween(begin: const Offset(1, 0), end: Offset.zero).chain(
                  CurveTween(curve: Curves.easeOut),
                ),
              ),
              child: child,
            );
          },
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.white,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () => Navigator.of(context).pop(),
        ),
        title: const Text('Selecione o destino', style: TextStyle(color: Colors.black)),
        centerTitle: true,
      ),
      body: Column(
        children: [
          FadeTransition(
            opacity: _routeAnimation,
            child: SlideTransition(
              position: _routeAnimation.drive(
                Tween(begin: const Offset(0, -0.3), end: Offset.zero),
              ),
              child: _buildRoutePlanner(),
            ),
          ),
          const Divider(height: 8, thickness: 8, color: Color(0xFFEEEEEE)),
          Expanded(child: _buildSuggestionsList()),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: AnimatedContainer(
              duration: const Duration(milliseconds: 300),
              child: ElevatedButton(
                onPressed: _navigateToRideOptions,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.black,
                  foregroundColor: Colors.white,
                  minimumSize: const Size(double.infinity, 50),
                ),
                child: const Text('Confirmar Destino'),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildRoutePlanner() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Row(
        children: [
          Column(
            children: [
              const Icon(Icons.circle, color: Colors.grey, size: 12),
              ...List.generate(
                _stopControllers.length + 1, // +1 for the line to the destination
                (index) => Column(
                  children: [
                    Container(height: 38, width: 1.5, color: Colors.grey),
                    if (index < _stopControllers.length)
                      const Icon(Icons.circle, color: Colors.grey, size: 12),
                  ],
                ),
              ),
              const Icon(Icons.square, color: Colors.black, size: 12),
            ],
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              children: [
                _buildLocationTextField(controller: _originController, hint: 'Ponto de partida'),
                const SizedBox(height: 8),
                ..._stopControllers.asMap().entries.map((entry) {
                  return Padding(
                    padding: const EdgeInsets.only(bottom: 8.0),
                    child: _buildLocationTextField(controller: entry.value, hint: 'Parada'),
                  );
                }).toList(),
                _buildLocationTextField(controller: _destinationController, hint: 'Para onde?'),
              ],
            ),
          ),
          RotatingAddButton(onPressed: _addStop),
        ],
      ),
    );
  }

  Widget _buildLocationTextField({required TextEditingController controller, required String hint}) {
    return Container(
      height: 50,
      alignment: Alignment.center,
      child: TextField(
        controller: controller,
        style: const TextStyle(color: Colors.black, fontSize: 16, fontWeight: FontWeight.w500),
        decoration: InputDecoration(
          hintText: hint,
          hintStyle: const TextStyle(color: Colors.grey, fontWeight: FontWeight.normal),
          filled: true,
          fillColor: const Color(0xFFEEEEEE),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: BorderSide.none,
          ),
          contentPadding: const EdgeInsets.symmetric(horizontal: 16),
        ),
      ),
    );
  }

  Widget _buildSuggestionsList() {
    return ListView(
      children: [
        AnimatedListItem(
          delay: 100,
          child: _buildSuggestionTile(
            icon: Icons.star,
            title: 'Casa',
            subtitle: 'Rua das Flores, 123, Cidade',
          ),
        ),
        AnimatedListItem(
          delay: 200,
          child: _buildSuggestionTile(
            icon: Icons.history,
            title: 'Shopping Center',
            subtitle: 'Avenida Principal, 456, Cidade',
          ),
        ),
        AnimatedListItem(
          delay: 300,
          child: _buildSuggestionTile(
            icon: Icons.history,
            title: 'Aeroporto Internacional',
            subtitle: 'Rodovia dos Viajantes, km 7',
          ),
        ),
      ],
    );
  }

  Widget _buildSuggestionTile({
    required IconData icon,
    required String title,
    required String subtitle,
  }) {
    return ListTile(
      leading: Icon(icon, color: Colors.grey[800]),
      title: Text(title, style: const TextStyle(color: Colors.black, fontWeight: FontWeight.bold)),
      subtitle: Text(subtitle, style: const TextStyle(color: Colors.grey)),
      onTap: () {},
    );
  }
}

// Botão de adicionar com rotação
class RotatingAddButton extends StatefulWidget {
  final VoidCallback onPressed;

  const RotatingAddButton({super.key, required this.onPressed});

  @override
  State<RotatingAddButton> createState() => _RotatingAddButtonState();
}

class _RotatingAddButtonState extends State<RotatingAddButton> with SingleTickerProviderStateMixin {
  late AnimationController _controller;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  void _handleTap() {
    _controller.forward(from: 0);
    widget.onPressed();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _controller,
      builder: (context, child) {
        return Transform.rotate(
          angle: _controller.value * 2 * pi,
          child: IconButton(
            icon: const Icon(Icons.add, color: Colors.black),
            onPressed: _handleTap,
          ),
        );
      },
    );
  }
}

// --- TELA DE OPÇÕES DE VIAGEM COM ANIMAÇÕES ---
class RideOptionsScreen extends StatefulWidget {
  const RideOptionsScreen({super.key});

  @override
  State<RideOptionsScreen> createState() => _RideOptionsScreenState();
}

class _RideOptionsScreenState extends State<RideOptionsScreen> with TickerProviderStateMixin {
  bool _needsAC = false;
  bool _hasPet = false;
  bool _needsTrunk = false;
  bool _isCondo = false;
  
  late AnimationController _entranceController;
  late List<Animation<Offset>> _slideAnimations;

  @override
  void initState() {
    super.initState();
    _entranceController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _slideAnimations = List.generate(6, (index) {
      return Tween<Offset>(
        begin: const Offset(0, 0.5),
        end: Offset.zero,
      ).animate(
        CurvedAnimation(
          parent: _entranceController,
          curve: Interval(
            index * 0.1,
            (0.4 + index * 0.1).clamp(0.0, 1.0),
            curve: Curves.easeOut,
          ),
        ),
      );
    });
    
    _entranceController.forward();
  }

  @override
  void dispose() {
    _entranceController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: const Text('Opções da Viagem', style: TextStyle(color: Colors.black)),
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView(
              padding: const EdgeInsets.all(16),
              children: [
                SlideTransition(
                  position: _slideAnimations[0],
                  child: const Text(
                    'Selecione a Categoria',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black),
                  ),
                ),
                const SizedBox(height: 16),
                SlideTransition(
                  position: _slideAnimations[1],
                  child: _buildCategoryTile(
                    icon: Icons.directions_car,
                    title: 'Carro Comum',
                    price: 'R\$ 25.00',
                    isSelected: true,
                  ),
                ),
                SlideTransition(
                  position: _slideAnimations[2],
                  child: _buildCategoryTile(
                    icon: Icons.local_shipping,
                    title: 'Frete',
                    price: 'R\$ 45.00',
                  ),
                ),
                const Divider(height: 32),
                SlideTransition(
                  position: _slideAnimations[3],
                  child: const Text(
                    'Preferências',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.black),
                  ),
                ),
                SlideTransition(
                  position: _slideAnimations[4],
                  child: AnimatedSwitchTile(
                    title: 'Precisa de Ar-Condicionado?',
                    value: _needsAC,
                    onChanged: (val) => setState(() => _needsAC = val),
                  ),
                ),
                SlideTransition(
                  position: _slideAnimations[5],
                  child: AnimatedSwitchTile(
                    title: 'Leva Animal de Estimação (Pet)?',
                    value: _hasPet,
                    onChanged: (val) => setState(() => _hasPet = val),
                  ),
                ),
                AnimatedSwitchTile(
                  title: 'Precisa de Porta-Malas Grande?',
                  value: _needsTrunk,
                  onChanged: (val) => setState(() => _needsTrunk = val),
                ),
                AnimatedSwitchTile(
                  title: 'Destino/Origem é em Condomínio?',
                  value: _isCondo,
                  onChanged: (val) => setState(() => _isCondo = val),
                ),
              ],
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: SlideInButton(
              text: 'Ver motoristas',
              onPressed: () => Navigator.of(context).push(
                MaterialPageRoute(builder: (context) => const DriverSelectionScreen()),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCategoryTile({
    required IconData icon,
    required String title,
    required String price,
    bool isSelected = false,
  }) {
    return AnimatedContainer(
      duration: const Duration(milliseconds: 300),
      margin: const EdgeInsets.only(bottom: 8),
      decoration: BoxDecoration(
        color: isSelected ? Colors.grey[200] : Colors.white,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: isSelected ? Colors.black : Colors.grey[300]!,
          width: isSelected ? 2 : 1.5,
        ),
      ),
      child: ListTile(
        leading: Icon(icon, color: Colors.black, size: 40),
        title: Text(title, style: const TextStyle(color: Colors.black, fontWeight: FontWeight.bold)),
        trailing: AnimatedPriceTag(price: price),
        onTap: () {},
      ),
    );
  }
}

// Switch animado
class AnimatedSwitchTile extends StatelessWidget {
  final String title;
  final bool value;
  final ValueChanged<bool> onChanged;

  const AnimatedSwitchTile({
    super.key,
    required this.title,
    required this.value,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return TweenAnimationBuilder<double>(
      tween: Tween(begin: 0, end: value ? 1 : 0),
      duration: const Duration(milliseconds: 200),
      builder: (context, animValue, child) {
        return Container(
          decoration: BoxDecoration(
            color: Color.lerp(Colors.transparent, Colors.black.withOpacity(0.05), animValue),
            borderRadius: BorderRadius.circular(8),
          ),
          child: SwitchListTile(
            title: Text(title, style: const TextStyle(color: Colors.black)),
            value: value,
            onChanged: onChanged,
            activeColor: Colors.black,
          ),
        );
      },
    );
  }
}

// Tag de preço animada
class AnimatedPriceTag extends StatefulWidget {
  final String price;

  const AnimatedPriceTag({super.key, required this.price});

  @override
  State<AnimatedPriceTag> createState() => _AnimatedPriceTagState();
}

class _AnimatedPriceTagState extends State<AnimatedPriceTag> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    _animation = CurvedAnimation(
      parent: _controller,
      curve: Curves.elasticOut,
    );
    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return ScaleTransition(
      scale: _animation,
      child: Text(
        widget.price,
        style: const TextStyle(
          color: Colors.black,
          fontSize: 16,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }
}

// Botão com slide in
class SlideInButton extends StatefulWidget {
  final String text;
  final VoidCallback onPressed;

  const SlideInButton({
    super.key,
    required this.text,
    required this.onPressed,
  });

  @override
  State<SlideInButton> createState() => _SlideInButtonState();
}

class _SlideInButtonState extends State<SlideInButton> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, 1),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeOut,
    ));
    _fadeAnimation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeIn,
    );
    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SlideTransition(
      position: _slideAnimation,
      child: FadeTransition(
        opacity: _fadeAnimation,
        child: ElevatedButton(
          onPressed: widget.onPressed,
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.black,
            foregroundColor: Colors.white,
            minimumSize: const Size(double.infinity, 50),
          ),
          child: Text(widget.text),
        ),
      ),
    );
  }
}

// --- MODELO DE DADOS PARA O MOTORISTA ---
class Driver {
  final String name;
  final String carModel;
  final double rating;
  final double price;
  final int eta;

  Driver({
    required this.name,
    required this.carModel,
    required this.rating,
    required this.price,
    required this.eta,
  });
}

// --- TELA DE SELEÇÃO DE MOTORISTA ---
class DriverSelectionScreen extends StatefulWidget {
  const DriverSelectionScreen({super.key});

  @override
  State<DriverSelectionScreen> createState() => _DriverSelectionScreenState();
}

class _DriverSelectionScreenState extends State<DriverSelectionScreen> with TickerProviderStateMixin {
  // CORREÇÃO: Adicionar GlobalKey para controlar a AnimatedList
  final GlobalKey<AnimatedListState> _listKey = GlobalKey<AnimatedListState>();
  List<Driver> _availableDrivers = [];
  bool _isLoading = true;
  late AnimationController _loadingController;

  @override
  void initState() {
    super.initState();
    _loadingController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    )..repeat();
    _findAvailableDrivers();
  }

  @override
  void dispose() {
    _loadingController.dispose();
    super.dispose();
  }

  Future<void> _findAvailableDrivers() async {
    setState(() {
      _isLoading = true;
    });

    await Future.delayed(const Duration(seconds: 2));

    List<Driver> driversFound = _generateMockDrivers(15);
    driversFound.sort((a, b) => a.eta.compareTo(b.eta));
    List<Driver> finalDriverList = driversFound.take(10).toList();

    setState(() {
      _isLoading = false;
      _availableDrivers = finalDriverList;
    });
  }

  List<Driver> _generateMockDrivers(int count) {
    final random = Random();
    final names = ['Carlos', 'João', 'Ana', 'Maria', 'Pedro', 'Sofia', 'Miguel', 'Lúcia', 'Ricardo', 'Beatriz'];
    final cars = ['Toyota Corolla', 'Honda Civic', 'Chevrolet Onix', 'Hyundai HB20', 'Fiat Argo'];

    return List.generate(count, (index) {
      return Driver(
        name: names[random.nextInt(names.length)],
        carModel: '${cars[random.nextInt(cars.length)]} ${2020 + random.nextInt(4)}',
        rating: 4.5 + random.nextDouble() * 0.5,
        price: 20.0 + random.nextDouble() * 15.0,
        eta: 2 + random.nextInt(10),
      );
    });
  }

  void _selectDriver(Driver driver) {
    final isAvailable = Random().nextDouble() > 0.2;

    if (isAvailable) {
      Navigator.of(context).push(
        PageRouteBuilder(
          pageBuilder: (context, animation, secondaryAnimation) => const WaitingForDriverScreen(),
          transitionsBuilder: (context, animation, secondaryAnimation, child) {
            return FadeTransition(
              opacity: animation,
              child: child,
            );
          },
        ),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Este motorista já não está disponível.'),
          backgroundColor: Colors.red,
        ),
      );
      // CORREÇÃO: Usar a GlobalKey para remover o item com animação
      final driverIndex = _availableDrivers.indexOf(driver);
      if (driverIndex != -1) {
        final removedDriver = _availableDrivers.removeAt(driverIndex);
        _listKey.currentState?.removeItem(
          driverIndex,
          (context, animation) => _buildAnimatedDriverTile(removedDriver, animation),
          duration: const Duration(milliseconds: 400),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Escolha um motorista', style: TextStyle(color: Colors.black)),
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: _isLoading
          ? Center(
              child: AnimatedBuilder(
                animation: _loadingController,
                builder: (context, child) {
                  return Transform.rotate(
                    angle: _loadingController.value * 2 * pi,
                    child: const Icon(
                      Icons.local_taxi,
                      size: 50,
                      color: Colors.black,
                    ),
                  );
                },
              ),
            )
          : AnimatedList(
              key: _listKey, // Atribuir a key
              initialItemCount: _availableDrivers.length,
              itemBuilder: (context, index, animation) {
                final driver = _availableDrivers[index];
                return _buildAnimatedDriverTile(driver, animation);
              },
            ),
    );
  }

  // Widget separado para o tile animado para reutilização na remoção
  Widget _buildAnimatedDriverTile(Driver driver, Animation<double> animation) {
    return SlideTransition(
      position: animation.drive(
        Tween(begin: const Offset(1, 0), end: Offset.zero).chain(
          CurveTween(curve: Curves.easeOut),
        ),
      ),
      child: FadeTransition(
        opacity: animation,
        child: _buildDriverTile(driver),
      ),
    );
  }

  Widget _buildDriverTile(Driver driver) {
    return ListTile(
      leading: const CircleAvatar(
        radius: 30,
        backgroundImage: NetworkImage('https://placehold.co/100x100/e2e8f0/cbd5e0?text=M'),
      ),
      title: Text(driver.name, style: const TextStyle(fontWeight: FontWeight.bold)),
      subtitle: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Icon(Icons.star, color: Colors.amber, size: 16),
              Text(' ${driver.rating.toStringAsFixed(1)}'),
            ],
          ),
          Text(driver.carModel),
        ],
      ),
      trailing: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            'R\$${driver.price.toStringAsFixed(2)}',
            style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
          ),
          Text('${driver.eta} min'),
        ],
      ),
      onTap: () => _selectDriver(driver),
    );
  }
}

// --- TELAS DO FLUXO DA VIAGEM ---
class WaitingForDriverScreen extends StatefulWidget {
  const WaitingForDriverScreen({super.key});

  @override
  State<WaitingForDriverScreen> createState() => _WaitingForDriverScreenState();
}

class _WaitingForDriverScreenState extends State<WaitingForDriverScreen> with SingleTickerProviderStateMixin {
  late AnimationController _pulseController;

  @override
  void initState() {
    super.initState();
    _pulseController = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    )..repeat(reverse: true);
    
    Timer(const Duration(seconds: 3), () {
      if (mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => const DriverEnRouteScreen()),
        );
      }
    });
  }

  @override
  void dispose() {
    _pulseController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            AnimatedBuilder(
              animation: _pulseController,
              builder: (context, child) {
                return Transform.scale(
                  scale: 1.0 + (_pulseController.value * 0.1),
                  child: Container(
                    width: 80,
                    height: 80,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      color: Colors.black.withOpacity(0.1 + _pulseController.value * 0.1),
                    ),
                    child: const Icon(
                      Icons.hourglass_top,
                      size: 40,
                      color: Colors.black,
                    ),
                  ),
                );
              },
            ),
            const SizedBox(height: 24),
            const Text(
              'Aguardando aceite do motorista...',
              style: TextStyle(fontSize: 18),
            ),
          ],
        ),
      ),
    );
  }
}

class DriverEnRouteScreen extends StatefulWidget {
  const DriverEnRouteScreen({super.key});

  @override
  State<DriverEnRouteScreen> createState() => _DriverEnRouteScreenState();
}

class _DriverEnRouteScreenState extends State<DriverEnRouteScreen> {
  @override
  void initState() {
    super.initState();
    Timer(const Duration(seconds: 5), () {
      if (mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => const OnTripScreen()),
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          Container(
            color: const Color(0xFFE2E8F0),
            child: Center(
              child: Text(
                'Mapa com motorista a caminho',
                style: TextStyle(fontSize: 20, color: Colors.grey[600]),
              ),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: _buildDriverInfoPanel(
              context,
              title: 'Motorista a caminho',
              button1: _buildActionButton(icon: Icons.chat, label: 'Chat'),
              button2: _buildActionButton(icon: Icons.call, label: 'Ligar'),
            ),
          ),
        ],
      ),
    );
  }
}

class OnTripScreen extends StatefulWidget {
  const OnTripScreen({super.key});

  @override
  State<OnTripScreen> createState() => _OnTripScreenState();
}

class _OnTripScreenState extends State<OnTripScreen> {
  @override
  void initState() {
    super.initState();
    Timer(const Duration(seconds: 8), () {
      if (mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => const RatingScreen()),
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          Container(
            color: const Color(0xFFE2E8F0),
            child: Center(
              child: Text(
                'Mapa em viagem para o destino',
                style: TextStyle(fontSize: 20, color: Colors.grey[600]),
              ),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: _buildDriverInfoPanel(
              context,
              title: 'Em viagem para o seu destino',
              button1: _buildActionButton(icon: Icons.share, label: 'Partilhar'),
              button2: _buildActionButton(icon: Icons.warning, label: 'Emergência'),
            ),
          ),
        ],
      ),
    );
  }
}

Widget _buildDriverInfoPanel(BuildContext context, {required String title, required Widget button1, required Widget button2}) {
  return TweenAnimationBuilder<double>(
    tween: Tween(begin: 0, end: 1),
    duration: const Duration(milliseconds: 600),
    curve: Curves.easeOut,
    builder: (context, value, child) {
      return Transform.translate(
        offset: Offset(0, 100 * (1 - value)),
        child: Opacity(
          opacity: value,
          child: Container(
            padding: const EdgeInsets.all(16),
            decoration: const BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.vertical(top: Radius.circular(24)),
              boxShadow: [BoxShadow(blurRadius: 10, color: Colors.black26)],
            ),
            child: Column(
              children: [
                Text(title, style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                const SizedBox(height: 16),
                const ListTile(
                  leading: CircleAvatar(
                    radius: 30,
                    backgroundImage: NetworkImage('https://placehold.co/100x100/e2e8f0/cbd5e0?text=M'),
                  ),
                  title: Text('Nome do Motorista', style: TextStyle(fontWeight: FontWeight.bold)),
                  subtitle: Text('Toyota Corolla - ABC-1234'),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [Icon(Icons.star, color: Colors.amber), Text('4.9')],
                  ),
                ),
                const Divider(height: 24),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [button1, button2],
                ),
              ],
            ),
          ),
        ),
      );
    },
  );
}

Widget _buildActionButton({required IconData icon, required String label}) {
  return Column(
    children: [
      CircleAvatar(
        radius: 25,
        backgroundColor: Colors.grey[200],
        child: Icon(icon, color: Colors.black),
      ),
      const SizedBox(height: 8),
      Text(label),
    ],
  );
}

class RatingScreen extends StatefulWidget {
  const RatingScreen({super.key});

  @override
  State<RatingScreen> createState() => _RatingScreenState();
}

class _RatingScreenState extends State<RatingScreen> with SingleTickerProviderStateMixin {
  int _rating = 0;
  late AnimationController _starController;
  late List<Animation<double>> _starAnimations;

  @override
  void initState() {
    super.initState();
    _starController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _starAnimations = List.generate(5, (index) {
      return Tween<double>(
        begin: 0,
        end: 1,
      ).animate(
        CurvedAnimation(
          parent: _starController,
          curve: Interval(
            index * 0.1,
            (0.4 + index * 0.1).clamp(0.0, 1.0),
            curve: Curves.elasticOut,
          ),
        ),
      );
    });
    
    _starController.forward();
  }

  @override
  void dispose() {
    _starController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text(
                'Obrigado pela viagem!',
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 16),
              const CircleAvatar(
                radius: 40,
                backgroundImage: NetworkImage('https://placehold.co/100x100/e2e8f0/cbd5e0?text=M'),
              ),
              const SizedBox(height: 8),
              const Text(
                'Nome do Motorista',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 24),
              const Text('Como foi a sua viagem?'),
              const SizedBox(height: 16),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: List.generate(5, (index) {
                  return AnimatedBuilder(
                    animation: _starAnimations[index],
                    builder: (context, child) {
                      return Transform.scale(
                        scale: _starAnimations[index].value,
                        child: IconButton(
                          icon: Icon(
                            index < _rating ? Icons.star : Icons.star_border,
                            color: Colors.amber,
                            size: 40,
                          ),
                          onPressed: () => setState(() => _rating = index + 1),
                        ),
                      );
                    },
                  );
                }),
              ),
              const SizedBox(height: 32),
              ElevatedButton(
                onPressed: () => Navigator.of(context).pushAndRemoveUntil(
                  MaterialPageRoute(builder: (context) => const PassengerHomeScreen()),
                  (route) => false,
                ),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.black,
                  foregroundColor: Colors.white,
                  minimumSize: const Size(double.infinity, 50),
                ),
                child: const Text('Enviar Avaliação'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// --- TELA PRINCIPAL DO MOTORISTA ---
class DriverHomeScreen extends StatefulWidget {
  const DriverHomeScreen({super.key});

  @override
  State<DriverHomeScreen> createState() => _DriverHomeScreenState();
}

class _DriverHomeScreenState extends State<DriverHomeScreen> with SingleTickerProviderStateMixin {
  bool _isOnline = false;
  late AnimationController _buttonController;
  late Animation<double> _buttonAnimation;

  @override
  void initState() {
    super.initState();
    _buttonController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    );
    _buttonAnimation = CurvedAnimation(
      parent: _buttonController,
      curve: Curves.easeInOut,
    );
  }

  @override
  void dispose() {
    _buttonController.dispose();
    super.dispose();
  }

  void _toggleOnlineStatus() {
    setState(() {
      _isOnline = !_isOnline;
      if (_isOnline) {
        _buttonController.repeat(reverse: true);
      } else {
        _buttonController.stop();
        _buttonController.reset();
      }
    });
  }

  void _simulateNewTripRequest() {
    Navigator.of(context).push(
      MaterialPageRoute(builder: (context) => const AcceptTripScreen()),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      drawer: const MenuScreen(isDriver: true),
      backgroundColor: _isOnline ? Colors.black : Colors.grey[800],
      floatingActionButton: _isOnline
          ? FloatingActionButton.extended(
              onPressed: _simulateNewTripRequest,
              label: const Text('Simular Pedido'),
              icon: const Icon(Icons.directions_car),
              backgroundColor: Colors.blue,
            )
          : null,
      body: Stack(
        children: [
          Container(
            color: const Color(0xFF4A4A4A),
            child: Center(
              child: Text('Mapa', style: TextStyle(fontSize: 32, color: Colors.grey[600])),
            ),
          ),
          SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  GestureDetector(
                    onTap: () => Navigator.of(context).push(
                      MaterialPageRoute(builder: (context) => const WalletScreen()),
                    ),
                    child: const Text(
                      'R\$0.00',
                      style: TextStyle(color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold),
                    ),
                  ),
                  Builder(
                    builder: (context) {
                      return Container(
                        decoration: BoxDecoration(
                          color: Colors.grey[900]?.withOpacity(0.8),
                          shape: BoxShape.circle,
                        ),
                        child: IconButton(
                          icon: const Icon(Icons.person, color: Colors.white),
                          onPressed: () => Scaffold.of(context).openDrawer(),
                        ),
                      );
                    },
                  ),
                ],
              ),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: _isOnline ? Colors.black : Colors.grey[900],
                borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
              ),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    _isOnline ? 'Você está online' : 'Você está offline',
                    style: const TextStyle(color: Colors.white, fontSize: 22, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    _isOnline ? 'Procurando viagens...' : 'Fique online para começar a aceitar viagens.',
                    style: TextStyle(color: Colors.grey[400], fontSize: 16),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 24),
                  GestureDetector(
                    onTap: _toggleOnlineStatus,
                    child: AnimatedBuilder(
                      animation: _buttonAnimation,
                      builder: (context, child) {
                        return AnimatedContainer(
                          duration: const Duration(milliseconds: 300),
                          width: 150,
                          height: 150,
                          decoration: BoxDecoration(
                            color: _isOnline ? Colors.grey[800] : Colors.blue,
                            shape: BoxShape.circle,
                            border: Border.all(
                              color: _isOnline ? Colors.grey[700]! : Colors.blue[300]!,
                              width: 10,
                            ),
                            boxShadow: [
                              BoxShadow(
                                color: (_isOnline ? Colors.red : Colors.blue).withOpacity(0.3 + (_isOnline ? _buttonAnimation.value * 0.3 : 0)),
                                blurRadius: 20 + (_isOnline ? _buttonAnimation.value * 10 : 0),
                                spreadRadius: 5 + (_isOnline ? _buttonAnimation.value * 5 : 0),
                              ),
                            ],
                          ),
                          child: Center(
                            child: Text(
                              _isOnline ? 'PARAR' : 'IR',
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 32,
                                fontWeight: FontWeight.bold,
                                letterSpacing: 2,
                              ),
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class AcceptTripScreen extends StatelessWidget {
  const AcceptTripScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          Container(
            color: const Color(0xFF4A4A4A),
            child: Center(
              child: Text(
                'Mapa com rota para o passageiro',
                style: TextStyle(fontSize: 20, color: Colors.grey[600]),
              ),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: Colors.grey[900],
                borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
              ),
              child: Column(
                children: [
                  const Text(
                    'Nova Solicitação',
                    style: TextStyle(color: Colors.white, fontSize: 22, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 16),
                  // CORREÇÃO: Removida linha duplicada e com erro de sintaxe
                  const ListTile(
                    leading: CircleAvatar(
                      radius: 25,
                      backgroundImage: NetworkImage('https://placehold.co/100x100/e2e8f0/cbd5e0?text=P'),
                    ),
                    title: Text('Nome do Passageiro', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                    subtitle: Row(
                      children: [
                        Icon(Icons.star, color: Colors.amber, size: 16),
                        Text(' 4.8', style: TextStyle(color: Colors.white)),
                      ],
                    ),
                  ),
                  const Divider(color: Colors.grey),
                  const Text('GANHOS ESTIMADOS', style: TextStyle(color: Colors.grey)),
                  CountUpAnimation(
                    endValue: 18.50,
                    duration: const Duration(seconds: 2),
                    style: const TextStyle(color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 24),
                  PulseButton(
                    onPressed: () => Navigator.of(context).pushReplacement(
                      MaterialPageRoute(builder: (context) => const PickupPassengerScreen()),
                    ),
                    text: 'Aceitar Viagem',
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// Widget de animação de contagem
class CountUpAnimation extends StatefulWidget {
  final double endValue;
  final Duration duration;
  final TextStyle style;

  const CountUpAnimation({
    super.key,
    required this.endValue,
    required this.duration,
    required this.style,
  });

  @override
  State<CountUpAnimation> createState() => _CountUpAnimationState();
}

class _CountUpAnimationState extends State<CountUpAnimation> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(duration: widget.duration, vsync: this);
    _animation = Tween<double>(begin: 0, end: widget.endValue).animate(
      CurvedAnimation(parent: _controller, curve: Curves.easeOutCubic),
    );
    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _animation,
      builder: (context, child) {
        return Text(
          'R\$ ${_animation.value.toStringAsFixed(2)}',
          style: widget.style,
        );
      },
    );
  }
}

// Botão com efeito de pulso
class PulseButton extends StatefulWidget {
  final VoidCallback onPressed;
  final String text;

  const PulseButton({
    super.key,
    required this.onPressed,
    required this.text,
  });

  @override
  State<PulseButton> createState() => _PulseButtonState();
}

class _PulseButtonState extends State<PulseButton> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;
  late Animation<double> _opacityAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    );
    
    _scaleAnimation = Tween<double>(
      begin: 1.0,
      end: 1.05,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    ));
    
    _opacityAnimation = Tween<double>(
      begin: 1.0,
      end: 0.8,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeInOut,
    ));
    
    _controller.repeat(reverse: true);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _controller,
      builder: (context, child) {
        return Transform.scale(
          scale: _scaleAnimation.value,
          child: Opacity(
            opacity: _opacityAnimation.value,
            child: ElevatedButton(
              onPressed: widget.onPressed,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
                minimumSize: const Size(double.infinity, 50),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
              ),
              child: Text(widget.text, style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            ),
          ),
        );
      },
    );
  }
}

// Telas de pickup e viagem com animações
class PickupPassengerScreen extends StatefulWidget {
  const PickupPassengerScreen({super.key});

  @override
  State<PickupPassengerScreen> createState() => _PickupPassengerScreenState();
}

class _PickupPassengerScreenState extends State<PickupPassengerScreen> with TickerProviderStateMixin {
  late AnimationController _mapController;
  late AnimationController _panelController;

  @override
  void initState() {
    super.initState();
    _mapController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat();
    _panelController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    )..forward();
  }

  @override
  void dispose() {
    _mapController.dispose();
    _panelController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          AnimatedBuilder(
            animation: _mapController,
            builder: (context, child) {
              return Container(
                color: const Color(0xFF4A4A4A),
                child: CustomPaint(
                  painter: RoutePainter(_mapController.value),
                  child: Center(
                    child: Text(
                      'Navegando até o passageiro...',
                      style: TextStyle(fontSize: 20, color: Colors.grey[600]),
                    ),
                  ),
                ),
              );
            },
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: SlideTransition(
              position: _panelController.drive(
                Tween(begin: const Offset(0, 1), end: Offset.zero).chain(
                  CurveTween(curve: Curves.easeOutCubic),
                ),
              ),
              child: Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.grey[900],
                  borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
                ),
                child: Column(
                  children: [
                    const ListTile(
                      leading: CircleAvatar(
                        radius: 25,
                        backgroundImage: NetworkImage('https://placehold.co/100x100/e2e8f0/cbd5e0?text=P'),
                      ),
                      title: Text('Nome do Passageiro', style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                      subtitle: Text('Aguardando no local de embarque', style: TextStyle(color: Colors.grey)),
                    ),
                    const SizedBox(height: 16),
                    SwipeToStartButton(
                      onSwipeComplete: () => Navigator.of(context).pushReplacement(
                        MaterialPageRoute(builder: (context) => const EnRouteToDestinationScreen()),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// CustomPainter para desenhar a rota animada
class RoutePainter extends CustomPainter {
  final double progress;

  RoutePainter(this.progress);

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.blue
      ..strokeWidth = 3
      ..style = PaintingStyle.stroke;

    final path = Path();
    final startX = size.width * 0.2;
    final startY = size.height * 0.8;
    final endX = size.width * 0.8;
    final endY = size.height * 0.2;

    path.moveTo(startX, startY);
    
    // Cria uma curva suave
    final controlX1 = size.width * 0.3;
    final controlY1 = size.height * 0.3;
    final controlX2 = size.width * 0.7;
    final controlY2 = size.height * 0.7;
    
    path.cubicTo(controlX1, controlY1, controlX2, controlY2, endX, endY);

    // Desenha a rota parcialmente baseada no progresso
    final pathMetrics = path.computeMetrics();
    for (final metric in pathMetrics) {
      final extractedPath = metric.extractPath(0, metric.length * progress);
      canvas.drawPath(extractedPath, paint);
    }

    // Desenha o carro no final do caminho
    if (progress > 0) {
      final carPaint = Paint()
        ..color = Colors.black
        ..style = PaintingStyle.fill;
      
      final pathMetricsForCar = path.computeMetrics();
      final metric = pathMetricsForCar.first;
      final tangent = metric.getTangentForOffset(metric.length * progress);
      
      if (tangent != null) {
          canvas.drawCircle(tangent.position, 8, carPaint);
      }
    }
  }

  @override
  bool shouldRepaint(RoutePainter oldDelegate) => oldDelegate.progress != progress;
}

// Botão deslizante para iniciar
class SwipeToStartButton extends StatefulWidget {
  final VoidCallback onSwipeComplete;

  const SwipeToStartButton({super.key, required this.onSwipeComplete});

  @override
  State<SwipeToStartButton> createState() => _SwipeToStartButtonState();
}

class _SwipeToStartButtonState extends State<SwipeToStartButton> with SingleTickerProviderStateMixin {
  double _dragPosition = 0;
  late AnimationController _resetController;
  late Animation<double> _resetAnimation;

  @override
  void initState() {
    super.initState();
    _resetController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _resetAnimation = Tween<double>(
      begin: 0,
      end: 0,
    ).animate(CurvedAnimation(
      parent: _resetController,
      curve: Curves.elasticOut,
    ));
  }

  @override
  void dispose() {
    _resetController.dispose();
    super.dispose();
  }

  void _onDragUpdate(DragUpdateDetails details, double maxWidth) {
    setState(() {
      _dragPosition = (_dragPosition + details.delta.dx).clamp(0.0, maxWidth - 60);
      if (_dragPosition >= maxWidth - 60) {
        widget.onSwipeComplete();
      }
    });
  }

  void _onDragEnd(DragEndDetails details, double maxWidth) {
    if (_dragPosition < maxWidth - 60) {
      _resetAnimation = Tween<double>(
        begin: _dragPosition,
        end: 0,
      ).animate(CurvedAnimation(
        parent: _resetController,
        curve: Curves.elasticOut,
      ));
      
      _resetController.forward(from: 0).then((_) {
        if (mounted) {
            setState(() {
              _dragPosition = 0;
            });
        }
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final maxWidth = constraints.maxWidth;
        
        return Container(
          height: 60,
          decoration: BoxDecoration(
            color: Colors.green,
            borderRadius: BorderRadius.circular(30),
          ),
          child: Stack(
            children: [
              Center(
                child: Text(
                  'Deslize para iniciar viagem',
                  style: TextStyle(
                    color: Colors.white.withOpacity(1 - (_dragPosition / (maxWidth - 60))),
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              AnimatedBuilder(
                animation: _resetController,
                builder: (context, child) {
                  return Positioned(
                    left: _resetController.isAnimating ? _resetAnimation.value : _dragPosition,
                    child: GestureDetector(
                      onHorizontalDragUpdate: (details) => _onDragUpdate(details, maxWidth),
                      onHorizontalDragEnd: (details) => _onDragEnd(details, maxWidth),
                      child: Container(
                        width: 60,
                        height: 60,
                        decoration: BoxDecoration(
                          color: Colors.white,
                          shape: BoxShape.circle,
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black.withOpacity(0.3),
                              blurRadius: 5,
                              offset: const Offset(0, 2),
                            ),
                          ],
                        ),
                        child: const Icon(
                          Icons.arrow_forward,
                          color: Colors.green,
                          size: 30,
                        ),
                      ),
                    ),
                  );
                },
              ),
            ],
          ),
        );
      },
    );
  }
}

class EnRouteToDestinationScreen extends StatefulWidget {
  const EnRouteToDestinationScreen({super.key});

  @override
  State<EnRouteToDestinationScreen> createState() => _EnRouteToDestinationScreenState();
}

class _EnRouteToDestinationScreenState extends State<EnRouteToDestinationScreen> with SingleTickerProviderStateMixin {
  late AnimationController _progressController;
  late Animation<double> _progressAnimation;

  @override
  void initState() {
    super.initState();
    _progressController = AnimationController(
      duration: const Duration(seconds: 10),
      vsync: this,
    );
    _progressAnimation = Tween<double>(
      begin: 0,
      end: 1,
    ).animate(CurvedAnimation(
      parent: _progressController,
      curve: Curves.linear,
    ));
    _progressController.forward();
  }

  @override
  void dispose() {
    _progressController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Stack(
        children: [
          Container(
            color: const Color(0xFF4A4A4A),
            child: Center(
              child: Text(
                'Navegando até o destino...',
                style: TextStyle(fontSize: 20, color: Colors.grey[600]),
              ),
            ),
          ),
          Positioned(
            bottom: 0,
            left: 0,
            right: 0,
            child: Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey[900],
                borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
              ),
              child: Column(
                children: [
                  const Text(
                    'Destino: Avenida Paulista, 1578',
                    style: TextStyle(color: Colors.white, fontSize: 18),
                  ),
                  const SizedBox(height: 16),
                  AnimatedBuilder(
                    animation: _progressAnimation,
                    builder: (context, child) {
                      return Column(
                        children: [
                          LinearProgressIndicator(
                            value: _progressAnimation.value,
                            backgroundColor: Colors.grey[700],
                            valueColor: const AlwaysStoppedAnimation<Color>(Colors.blue),
                            minHeight: 5,
                          ),
                          const SizedBox(height: 8),
                          Text(
                            '${(_progressAnimation.value * 100).toInt()}% concluído',
                            style: const TextStyle(color: Colors.grey),
                          ),
                        ],
                      );
                    },
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: () => Navigator.of(context).pushReplacement(
                      MaterialPageRoute(builder: (context) => const RatePassengerScreen()),
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red,
                      foregroundColor: Colors.white,
                      minimumSize: const Size(double.infinity, 50),
                    ),
                    child: const Text(
                      'Finalizar Viagem',
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

class RatePassengerScreen extends StatefulWidget {
  const RatePassengerScreen({super.key});

  @override
  State<RatePassengerScreen> createState() => _RatePassengerScreenState();
}

class _RatePassengerScreenState extends State<RatePassengerScreen> with TickerProviderStateMixin {
  int _rating = 0;
  late AnimationController _confettiController;
  late AnimationController _checkController;
  final List<ConfettiParticle> _confetti = [];

  @override
  void initState() {
    super.initState();
    _confettiController = AnimationController(
      duration: const Duration(seconds: 3),
      vsync: this,
    );
    _checkController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    // Gera partículas de confete
    for (int i = 0; i < 30; i++) {
      _confetti.add(ConfettiParticle());
    }
  }

  @override
  void dispose() {
    _confettiController.dispose();
    _checkController.dispose();
    super.dispose();
  }

  void _submitRating() {
    _checkController.forward();
    _confettiController.forward();
    
    Future.delayed(const Duration(seconds: 2), () {
      if (mounted) Navigator.of(context).pop();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[900],
      body: Stack(
        children: [
          Center(
            child: Padding(
              padding: const EdgeInsets.all(24.0),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  ScaleTransition(
                    scale: _checkController.drive(
                      Tween(begin: 0, end: 1).chain(
                        CurveTween(curve: Curves.elasticOut),
                      ),
                    ),
                    child: Container(
                      width: 80,
                      height: 80,
                      decoration: const BoxDecoration(
                        color: Colors.green,
                        shape: BoxShape.circle,
                      ),
                      child: const Icon(
                        Icons.check,
                        color: Colors.white,
                        size: 50,
                      ),
                    ),
                  ),
                  const SizedBox(height: 24),
                  const Text(
                    'Viagem Finalizada',
                    style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.white),
                  ),
                  const SizedBox(height: 8),
                  ShimmerText(
                    text: 'Ganhos: R\$ 18.50',
                    style: const TextStyle(fontSize: 20, color: Colors.green),
                  ),
                  const SizedBox(height: 24),
                  const CircleAvatar(
                    radius: 40,
                    backgroundImage: NetworkImage('https://placehold.co/100x100/e2e8f0/cbd5e0?text=P'),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    'Nome do Passageiro',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white),
                  ),
                  const SizedBox(height: 24),
                  const Text('Avalie o seu passageiro', style: TextStyle(color: Colors.white)),
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: List.generate(5, (index) {
                      return TapAnimatedStar(
                        isSelected: index < _rating,
                        onTap: () => setState(() => _rating = index + 1),
                      );
                    }),
                  ),
                  const SizedBox(height: 32),
                  AnimatedOpacity(
                    opacity: _rating > 0 ? 1.0 : 0.3,
                    duration: const Duration(milliseconds: 300),
                    child: ElevatedButton(
                      onPressed: _rating > 0 ? _submitRating : null,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blue,
                        foregroundColor: Colors.white,
                        minimumSize: const Size(double.infinity, 50),
                      ),
                      child: const Text('Enviar Avaliação'),
                    ),
                  ),
                ],
              ),
            ),
          ),
          // Confete animado
          if (_confettiController.isAnimating)
            ...List.generate(_confetti.length, (index) {
              return AnimatedBuilder(
                animation: _confettiController,
                builder: (context, child) {
                  final particle = _confetti[index];
                  final progress = _confettiController.value;
                  return Positioned(
                    left: particle.x * MediaQuery.of(context).size.width,
                    top: particle.startY + (particle.endY * progress * MediaQuery.of(context).size.height),
                    child: Transform.rotate(
                      angle: progress * particle.rotation * 2 * pi,
                      child: Opacity(
                        opacity: 1 - progress,
                        child: Container(
                          width: 10,
                          height: 10,
                          color: particle.color,
                        ),
                      ),
                    ),
                  );
                },
              );
            }),
        ],
      ),
    );
  }
}

// Classe para partículas de confete
class ConfettiParticle {
  final double x = Random().nextDouble();
  final double startY = -0.1;
  final double endY = Random().nextDouble() + 0.5;
  final double rotation = Random().nextDouble() * 4;
  final Color color = [
    Colors.red,
    Colors.blue,
    Colors.yellow,
    Colors.green,
    Colors.purple,
    Colors.orange,
  ][Random().nextInt(6)];
}

// Estrela animada ao tocar
class TapAnimatedStar extends StatefulWidget {
  final bool isSelected;
  final VoidCallback onTap;

  const TapAnimatedStar({
    super.key,
    required this.isSelected,
    required this.onTap,
  });

  @override
  State<TapAnimatedStar> createState() => _TapAnimatedStarState();
}

class _TapAnimatedStarState extends State<TapAnimatedStar> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _scaleAnimation = Tween<double>(
      begin: 1.0,
      end: 1.3,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.elasticOut,
    ));
  }

  @override
  void didUpdateWidget(TapAnimatedStar oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.isSelected && !oldWidget.isSelected) {
      _controller.forward().then((_) {
        if (mounted) _controller.reverse();
      });
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return ScaleTransition(
      scale: _scaleAnimation,
      child: IconButton(
        icon: Icon(
          widget.isSelected ? Icons.star : Icons.star_border,
          color: Colors.amber,
          size: 40,
        ),
        onPressed: widget.onTap,
      ),
    );
  }
}

// Texto com efeito shimmer
class ShimmerText extends StatefulWidget {
  final String text;
  final TextStyle style;

  const ShimmerText({
    super.key,
    required this.text,
    required this.style,
  });

  @override
  State<ShimmerText> createState() => _ShimmerTextState();
}

class _ShimmerTextState extends State<ShimmerText> with SingleTickerProviderStateMixin {
  late AnimationController _controller;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _controller,
      builder: (context, child) {
        return ShaderMask(
          shaderCallback: (bounds) {
            return LinearGradient(
              colors: const [
                Colors.green,
                Colors.greenAccent,
                Colors.green,
              ],
              stops: [
                _controller.value - 0.3,
                _controller.value,
                _controller.value + 0.3,
              ],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ).createShader(bounds);
          },
          child: Text(widget.text, style: widget.style),
        );
      },
    );
  }
}

// --- TELA DA CARTEIRA COM ANIMAÇÕES ---
class WalletScreen extends StatefulWidget {
  const WalletScreen({super.key});

  @override
  State<WalletScreen> createState() => _WalletScreenState();
}

class _WalletScreenState extends State<WalletScreen> with TickerProviderStateMixin {
  late AnimationController _balanceController;
  late AnimationController _listController;

  @override
  void initState() {
    super.initState();
    _balanceController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _listController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _balanceController.forward();
    Future.delayed(const Duration(milliseconds: 300), () {
      if (mounted) _listController.forward();
    });
  }

  @override
  void dispose() {
    _balanceController.dispose();
    _listController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.black,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.of(context).pop(),
        ),
        title: const Text('Carteira', style: TextStyle(color: Colors.white)),
        centerTitle: true,
      ),
      body: ListView(
        children: [
          SlideTransition(
            position: _balanceController.drive(
              Tween(begin: const Offset(0, -0.5), end: Offset.zero).chain(
                CurveTween(curve: Curves.easeOutCubic),
              ),
            ),
            child: FadeTransition(
              opacity: _balanceController,
              child: _buildBalanceHeader(),
            ),
          ),
          FadeTransition(
            opacity: _listController,
            child: Column(
              children: [
                _buildActions(),
                _buildSectionTitle('Formas de pagamento'),
                _buildPaymentMethodTile(
                  icon: Icons.credit_card,
                  title: 'Visa **** 1234',
                  isDefault: true,
                ),
                _buildSectionTitle('Transações recentes'),
                AnimatedTransactionTile(
                  title: 'Viagem para o centro',
                  date: 'Hoje',
                  amount: '- R\$15.50',
                  isDebit: true,
                  delay: 100,
                ),
                AnimatedTransactionTile(
                  title: 'Depósito',
                  date: 'Ontem',
                  amount: '+ R\$50.00',
                  isDebit: false,
                  delay: 200,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBalanceHeader() {
    return Container(
      padding: const EdgeInsets.all(24.0),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [Colors.grey[900]!, Colors.grey[850]!],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text('Saldo Uber', style: TextStyle(color: Colors.grey, fontSize: 16)),
          const SizedBox(height: 8),
          CountUpAnimation(
            endValue: 34.50,
            duration: const Duration(seconds: 2),
            style: const TextStyle(color: Colors.white, fontSize: 40, fontWeight: FontWeight.bold),
          ),
        ],
      ),
    );
  }

  Widget _buildActions() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 24.0),
      child: Row(
        children: [
          Expanded(
            child: BounceButton(
              icon: Icons.add_circle,
              label: 'Adicionar fundos',
              onPressed: () {},
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: BounceButton(
              icon: Icons.arrow_circle_up,
              label: 'Retirar',
              onPressed: () {},
              delay: 100,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: const EdgeInsets.fromLTRB(16, 16, 16, 8),
      child: Text(
        title,
        style: const TextStyle(color: Colors.grey, fontSize: 16, fontWeight: FontWeight.bold),
      ),
    );
  }

  Widget _buildPaymentMethodTile({
    required IconData icon,
    required String title,
    bool isDefault = false,
  }) {
    return ListTile(
      leading: Icon(icon, color: Colors.white),
      title: Text(title, style: const TextStyle(color: Colors.white)),
      trailing: isDefault
          ? const Text('Padrão', style: TextStyle(color: Colors.grey))
          : const Icon(Icons.arrow_forward_ios, color: Colors.grey, size: 16),
      onTap: () {},
    );
  }
}

// Botão com efeito bounce
class BounceButton extends StatefulWidget {
  final IconData icon;
  final String label;
  final VoidCallback onPressed;
  final int delay;

  const BounceButton({
    super.key,
    required this.icon,
    required this.label,
    required this.onPressed,
    this.delay = 0,
  });

  @override
  State<BounceButton> createState() => _BounceButtonState();
}

class _BounceButtonState extends State<BounceButton> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    _scaleAnimation = Tween<double>(
      begin: 0,
      end: 1,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.elasticOut,
    ));
    
    Future.delayed(Duration(milliseconds: widget.delay), () {
      if (mounted) _controller.forward();
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return ScaleTransition(
      scale: _scaleAnimation,
      child: ElevatedButton.icon(
        onPressed: widget.onPressed,
        icon: Icon(widget.icon, color: Colors.white),
        label: Text(widget.label),
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.grey[800],
          foregroundColor: Colors.white,
          padding: const EdgeInsets.symmetric(vertical: 16),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
        ),
      ),
    );
  }
}

// Tile de transação animada
class AnimatedTransactionTile extends StatefulWidget {
  final String title;
  final String date;
  final String amount;
  final bool isDebit;
  final int delay;

  const AnimatedTransactionTile({
    super.key,
    required this.title,
    required this.date,
    required this.amount,
    required this.isDebit,
    this.delay = 0,
  });

  @override
  State<AnimatedTransactionTile> createState() => _AnimatedTransactionTileState();
}

class _AnimatedTransactionTileState extends State<AnimatedTransactionTile> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<Offset> _slideAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 500),
      vsync: this,
    );
    _slideAnimation = Tween<Offset>(
      begin: const Offset(1, 0),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeOut,
    ));
    
    Future.delayed(Duration(milliseconds: widget.delay), () {
      if (mounted) _controller.forward();
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SlideTransition(
      position: _slideAnimation,
      child: ListTile(
        leading: Icon(
          widget.isDebit ? Icons.directions_car : Icons.add_circle,
          color: Colors.white,
        ),
        title: Text(widget.title, style: const TextStyle(color: Colors.white)),
        subtitle: Text(widget.date, style: const TextStyle(color: Colors.grey)),
        trailing: Text(
          widget.amount,
          style: TextStyle(
            color: widget.isDebit ? Colors.white : Colors.green,
            fontWeight: FontWeight.bold,
            fontSize: 16,
          ),
        ),
      ),
    );
  }
}

// --- TELA DO MENU LATERAL ---
class MenuScreen extends StatelessWidget {
  final bool isDriver;
  const MenuScreen({super.key, this.isDriver = false});

  @override
  Widget build(BuildContext context) {
    return Drawer(
      child: Container(
        color: Colors.white,
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            _buildHeader(),
            AnimatedMenuItem(
              icon: Icons.history,
              text: 'As suas viagens',
              delay: 100,
              onTap: () {
                Navigator.of(context).pop();
                Navigator.of(context).push(
                  MaterialPageRoute(builder: (context) => const TripsHistoryScreen()),
                );
              },
            ),
            AnimatedMenuItem(
              icon: Icons.help_outline,
              text: 'Ajuda',
              delay: 200,
              onTap: () {},
            ),
            AnimatedMenuItem(
              icon: Icons.account_balance_wallet,
              text: 'Carteira',
              delay: 300,
              onTap: () {
                Navigator.of(context).pop();
                Navigator.of(context).push(
                  MaterialPageRoute(builder: (context) => const WalletScreen()),
                );
              },
            ),
            const Divider(),
            AnimatedMenuItem(
              icon: Icons.settings,
              text: 'Definições',
              delay: 400,
              onTap: () {
                Navigator.of(context).pop();
                Navigator.of(context).push(
                  MaterialPageRoute(builder: (context) => const SettingsScreen()),
                );
              },
            ),
            if (isDriver)
              AnimatedMenuItem(
                icon: Icons.bar_chart,
                text: 'Ganhos',
                delay: 500,
                onTap: () {},
              ),
            AnimatedMenuItem(
              icon: Icons.logout,
              text: 'Sair',
              delay: 600,
              onTap: () => Navigator.of(context).pushAndRemoveUntil(
                MaterialPageRoute(builder: (context) => const LoginScreen()),
                (route) => false,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      color: Colors.grey[200],
      padding: const EdgeInsets.fromLTRB(16, 60, 16, 24),
      child: const Row(
        children: [
          Hero(
            tag: 'profile',
            child: CircleAvatar(
              radius: 30,
              backgroundImage: NetworkImage('https://placehold.co/100x100/e2e8f0/cbd5e0?text=U'),
            ),
          ),
          SizedBox(width: 16),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Utilizador',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.black),
              ),
              Row(
                children: [
                  Icon(Icons.star, size: 16),
                  Text(' 4.9', style: TextStyle(color: Colors.black54)),
                ],
              ),
            ],
          ),
        ],
      ),
    );
  }
}

// MenuItem animado
class AnimatedMenuItem extends StatefulWidget {
  final IconData icon;
  final String text;
  final VoidCallback onTap;
  final int delay;

  const AnimatedMenuItem({
    super.key,
    required this.icon,
    required this.text,
    required this.onTap,
    this.delay = 0,
  });

  @override
  State<AnimatedMenuItem> createState() => _AnimatedMenuItemState();
}

class _AnimatedMenuItemState extends State<AnimatedMenuItem> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 500),
      vsync: this,
    );
    
    _slideAnimation = Tween<Offset>(
      begin: const Offset(-0.5, 0),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeOut,
    ));
    
    _fadeAnimation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeIn,
    );
    
    Future.delayed(Duration(milliseconds: widget.delay), () {
      if (mounted) _controller.forward();
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SlideTransition(
      position: _slideAnimation,
      child: FadeTransition(
        opacity: _fadeAnimation,
        child: ListTile(
          leading: Icon(widget.icon, color: Colors.grey[800]),
          title: Text(
            widget.text,
            style: TextStyle(color: Colors.grey[800], fontSize: 16, fontWeight: FontWeight.w500),
          ),
          onTap: widget.onTap,
        ),
      ),
    );
  }
}

// --- TELA DE HISTÓRICO DE VIAGENS ---
class TripsHistoryScreen extends StatelessWidget {
  const TripsHistoryScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () => Navigator.of(context).pop(),
        ),
        title: const Text('As Suas Viagens', style: TextStyle(color: Colors.black)),
        centerTitle: true,
      ),
      body: ListView(
        children: [
          AnimatedTripTile(
            origin: 'Rua de Casa, 123',
            destination: 'Avenida Paulista, 1578',
            date: 'Hoje, 14:30',
            price: 'R\$ 22.50',
            delay: 0,
          ),
          AnimatedTripTile(
            origin: 'Shopping Morumbi',
            destination: 'Aeroporto de Congonhas',
            date: 'Ontem, 10:15',
            price: 'R\$ 45.80',
            delay: 100,
          ),
          AnimatedTripTile(
            origin: 'Parque Ibirapuera',
            destination: 'Shopping Morumbi',
            date: '06 de Ago, 19:00',
            price: 'R\$ 18.00',
            delay: 200,
          ),
        ],
      ),
    );
  }
}

// Tile de viagem animada
class AnimatedTripTile extends StatefulWidget {
  final String origin;
  final String destination;
  final String date;
  final String price;
  final int delay;

  const AnimatedTripTile({
    super.key,
    required this.origin,
    required this.destination,
    required this.date,
    required this.price,
    this.delay = 0,
  });

  @override
  State<AnimatedTripTile> createState() => _AnimatedTripTileState();
}

class _AnimatedTripTileState extends State<AnimatedTripTile> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _fadeAnimation = CurvedAnimation(
      parent: _controller,
      curve: Curves.easeIn,
    );
    
    _slideAnimation = Tween<Offset>(
      begin: const Offset(0.5, 0),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.easeOut,
    ));
    
    Future.delayed(Duration(milliseconds: widget.delay), () {
      if (mounted) _controller.forward();
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SlideTransition(
      position: _slideAnimation,
      child: FadeTransition(
        opacity: _fadeAnimation,
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
          child: Row(
            children: [
              const Icon(Icons.local_taxi, color: Colors.black, size: 40),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      widget.destination,
                      style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 4),
                    Text(
                      'De: ${widget.origin}',
                      style: const TextStyle(color: Colors.grey),
                      overflow: TextOverflow.ellipsis,
                    ),
                    const SizedBox(height: 4),
                    Text(
                      widget.date,
                      style: const TextStyle(color: Colors.grey, fontSize: 12),
                    ),
                  ],
                ),
              ),
              Text(
                widget.price,
                style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// --- TELA DE DEFINIÇÕES ---
class SettingsScreen extends StatelessWidget {
  const SettingsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[100],
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black),
          onPressed: () => Navigator.of(context).pop(),
        ),
        title: const Text('Definições', style: TextStyle(color: Colors.black)),
        centerTitle: true,
      ),
      body: ListView(
        children: [
          const SizedBox(height: 24),
          AnimatedSettingsTile(
            icon: Icons.person,
            title: 'Editar Perfil',
            delay: 0,
            onTap: () {},
          ),
          AnimatedSettingsTile(
            icon: Icons.notifications,
            title: 'Notificações',
            delay: 100,
            onTap: () {},
          ),
          AnimatedSettingsTile(
            icon: Icons.lock,
            title: 'Privacidade',
            delay: 200,
            onTap: () {},
          ),
          AnimatedSettingsTile(
            icon: Icons.security,
            title: 'Segurança',
            delay: 300,
            onTap: () {},
          ),
          const Divider(),
          AnimatedSettingsTile(
            icon: Icons.info,
            title: 'Sobre',
            delay: 400,
            onTap: () {},
          ),
        ],
      ),
    );
  }
}

// Tile de configurações animado
class AnimatedSettingsTile extends StatefulWidget {
  final IconData icon;
  final String title;
  final VoidCallback onTap;
  final int delay;

  const AnimatedSettingsTile({
    super.key,
    required this.icon,
    required this.title,
    required this.onTap,
    this.delay = 0,
  });

  @override
  State<AnimatedSettingsTile> createState() => _AnimatedSettingsTileState();
}

class _AnimatedSettingsTileState extends State<AnimatedSettingsTile> with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 500),
      vsync: this,
    );
    
    _scaleAnimation = Tween<double>(
      begin: 0,
      end: 1,
    ).animate(CurvedAnimation(
      parent: _controller,
      curve: Curves.elasticOut,
    ));
    
    Future.delayed(Duration(milliseconds: widget.delay), () {
      if (mounted) _controller.forward();
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return ScaleTransition(
      scale: _scaleAnimation,
      child: ListTile(
        leading: Icon(widget.icon, color: Colors.grey[800]),
        title: Text(widget.title, style: const TextStyle(fontSize: 16)),
        trailing: const Icon(Icons.arrow_forward_ios, size: 16),
        onTap: widget.onTap,
      ),
    );
  }
}


